/*

*/  
System /* -msglog */ coldstorageservice 

//Dispatch startcmd   : start( ARG ) 					//sender:serviceaccessgui receiver:appl
Request storefood : storefood( KG ) 					//sender:serviceaccessgui receiver:coldstorageservice
Reply ticketaccepted : ticketaccepted( TICKETCODE, TICKETSECRET, TIMESTAMP ) 	//sender:coldstorageservice receiver:serviceaccessgui
Reply ticketdenied  : ticketdenied( ARG ) 		//sender:coldstorageservice receiver:serviceaccessgui

													//sender:coldstorage receiver:coldstorageservice

//Dispatch failticket : failticket(ARG) 
Request sendticket: sendticket(TICKETCODE, TICKETSECRET) 			//sender:serviceaccessgui receiver:coldstorageservice
Reply chargetaken : chargetaken(ARG)				//sender:coldstorageservice receiver:serviceaccessgui 
Reply ticketexpired: ticketexpired(ARG) 			//sender:coldstorageservice receiver:serviceaccessgui 
Reply ticketrejected: ticketrejected(ARG) 			//sender:coldstorageservice receiver:serviceaccessgui 


//start depositaction
Dispatch dodepositaction:dodepositaction(TICKETCODE)
//robot events
Event robotisinindoor:robotisinindoor(ARG)
Event robotisinhome:robotisinhome(ARG) 
Event depositactionended:depositactionended(ARG)
Dispatch gohome:gohome(ARG)													//emitter:serviceaccessgui listener:coldstorageservice
										 			//emitter:serviceaccessgui listener:fakeuser

 
//robot pos messages
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(ARG)


//-------------------------------------------------------------
Request howmanykgavailable : howmanykgavailable(ARG) //sender:coldstorageservice receiver:coldroom
Reply kgavailable : kgavailable(KG) //sender:coldroom receiver:coldstorageservice 
Dispatch updatekg : updatekg (KG) //sender:coldstorageservice receiver:coldroom

 
 //serviceaccessgui messages
Request dostorefood:dostorefood(KG)
Request doinsertticket:doinsertticket(TICKETNUMBER,TIMESTAMP)

Request engage : engage(ARG)
Reply   engagedone    : engagedone(ARG) 
Reply   engagerefused : engagerefused(ARG)

Context ctxbasicrobot ip [host="127.0.0.1" port=8020 ]   
Context ctxcoldstorageservice ip [host="localhost" port=8038 ]
 Context ctxgui ip [host="127.0.0.1" port=8112] 
ExternalQActor basicrobot context ctxbasicrobot  
 
 
//ExternalQActor serviceaccessgui context ctxgui
 
/*  
 * ------------------------------------------------------------------
 *  coldstorageservice 
 * ------------------------------------------------------------------
*/      
QActor coldstorageservice context ctxcoldstorageservice{  
	 
		//*********** INTERAZIONE CON SERVICE ACCESS GUI
		[# 
			var Kgtoload : Int = 0; 
			var Expirationtime:Long = 100;
			var ticketList=it.unibo.ticket.TicketList(Expirationtime);
			#
		]
		State s0 initial {	  
			println("$name | wait for messages") color green
			//tutti i messaggi che arrivano quando sono in uno degli stati successivi
			//se non considerati, non vengono scartati, ma vengono memorizzati in coda e presi in carico successivamente
			//quando si andrà in uno stato che potrà processarli
			discardMsg Off  //default: discardMsg On
	    	
	   	}  
	   	Transition t0 whenRequest storefood -> askhowmanykgoccupied
	    			whenRequest sendticket-> checkforticketexpired
	    			whenEvent robotisinindoor-> sendchargetaken
	    			whenEvent depositactionended -> updatecoldstorage
	  	
	  	///STOREFOOD REQUEST MANAGEMENT/////////////////
	  	State askhowmanykgoccupied{ 
	  		onMsg(storefood:storefood(KG)){
	  		[# Kgtoload = payloadArg(0).toInt(); #] 
	  		println("$name | chilograms to load $Kgtoload ") color green
	  		
	  		//chiedi a cold room quanto spazio è disponibile
	  		request coldroom -m howmanykgavailable : howmanykgavailable
	  		} 
		}
		Transition t0 whenReply kgavailable -> checkifthereisenoughspace
		
		State checkifthereisenoughspace {
			onMsg(kgavailable:kgavailable(KG)){
			[# var Kgavailable = payloadArg(0).toLong(); 
				var Totalkgtostore=ticketList.getTotalKgToStore();
			#]
			println("$name | total kg of current tickets: $Totalkgtostore") color green
			if [# Kgtoload <= Kgavailable-Totalkgtostore#] { 
				[# 
				var ticket=ticketList.createTicket(Kgtoload);
			   var TICKETCODE = ticket.getTicketNumber();
			   var TICKETSECRET= ticket.getTicketSecret();
			   var TIMESTAMP = ticket.getTimestamp(); 
			#]
				
				println("$name | ticket accepted with $TICKETCODE, $TICKETSECRET, $TIMESTAMP") color green
				replyTo storefood with ticketaccepted : ticketaccepted($TICKETCODE, $TICKETSECRET, $TIMESTAMP)
			}
			else{
				println("$name | ticket denied") color green
				replyTo storefood with ticketdenied : ticketdenied(ARG)
			}
				
			}
					}   
	  	Goto s0
	  	///////////////////////////////////////////////////////////
	  	
	  	///////////////// SENDTICKET DISPATCH MANAGEMENT /////////////////
	  	State checkforticketexpired{
	  		//TODO
	  		onMsg(sendticket: sendticket(TICKETCODE, TICKETSECRET)){
	  			[#var TICKETCODE = payloadArg(0).toInt();
			   var TICKETSECRET= payloadArg(1);
			   var Ticket=ticketList.getTicket(TICKETCODE);
			   #]
			   if[#ticketList.isExpired(Ticket) #]{
			   	replyTo sendticket with ticketexpired: ticketexpired(ARG)
			   }else{
			   		if[#!Ticket.getTicketSecret().equals(TICKETSECRET) #]{
			   			replyTo sendticket with  ticketrejected: ticketrejected(ARG)
			   		}else{
			   			[#Ticket.setStatus(1);#]
						forward transporttrolley -m dodepositaction : dodepositaction($TICKETCODE)  	
			   		}	
			   }
			   
	  		}
	  	}
	  	Goto s0
	  	////////////////////////////////////////////////////
	  	
	  	//////////////// SEND CHARGETAKEN/////////////////
	  	State sendchargetaken{
	  		replyTo sendticket with chargetaken:chargetaken(ok)
	  	}
	  	Goto s0
	  	///////////////////////////////////////////////
	  	
	  	//////////////////////// COLDROOM STATUS UPDATE///////////////////////////////
	  	State updatecoldstorage {
	  		
	  		//add kg already arrived to cold storage
	  		onMsg(depositactionended:depositactionended(TICKETCODE)){
	  			[# var Ticketcode=payloadArg(0).toInt();
	  				#]
	  				println("$name | updating coldroom status ending operation number: $Ticketcode" ) color green
	  				[#
	  				var Ticket=ticketList.getTicket(Ticketcode);
	  				var Kg=Ticket.getKgToStore();
	  				var L=ticketList.toString();
	  				#
	  			]
	  			forward coldroom -m updatekg : updatekg($Kg)
	  			println("$L") color green
	  		[#
	  			ticketList.removeTicket(Ticketcode);
	  			L=ticketList.toString();#
	  		]
	  			println("$L") color green
	  		}
	  		
	  		
	  	}
	   	Goto s0
  		/////////////////////////////////////////////////////////////////
  	}
  

/*   
 * ------------------------------------------------------------------
 *  coldroom
 * ------------------------------------------------------------------
*/     
QActor coldroom context ctxcoldstorageservice{   
	[# var Kgstored : Long = 0 ;
		var MAXW : Long = 100;
		var Kgavailable=MAXW; #
	]   //TODO
	
	State s0 initial {	
		discardMsg Off 
		println("$name | active") color yellow
		
   	}  
	//wait request on info kg
	Transition t0 whenRequest howmanykgavailable -> replywithcoldroomspacestate
				  whenMsg updatekg -> handleupdateKg
	
	
	State replywithcoldroomspacestate{ 
		//send the actual state of the space
		println("$name | kg available $Kgavailable") color yellow
		replyTo howmanykgavailable with kgavailable : kgavailable($Kgavailable)
	}
	//wait request on info kg
	Goto s0
	
	//request to update kg
	State handleupdateKg{
		//update storage
		onMsg(updatekg:updatekg(KG)){
		[# 
			var insertkg = payloadArg(0).toLong();
			Kgstored += insertkg;
			Kgavailable-=insertkg;
		#]	
		println("$name | updated storage Kgavailable:$Kgavailable Kgstored:$Kgstored") color yellow
		}
		
	}
	Goto s0
}


/*  
 * ------------------------------------------------------------------
 *  transporttrolley
 * ------------------------------------------------------------------
*/      
QActor transporttrolley context ctxcoldstorageservice{     
	
	[#
		var COLDROOMX=4;
		var COLDROOMY=3;
		var INDOORX=0;
		var INDOORY=4;
		var HOMEX=0;
		var HOMEY=0;
		var TICKETCODE=-1;
	#]
	State s0 initial{
		//set home,indoor,coldroom positions
		
	//usefull for keep tracking of coldstorageservice request operations
	discardMsg Off
	//try to engage basicrobot on startup
    println("$name |  request engage") color red
    request basicrobot -m engage : engage( transporttrolley )
  	}
   	Transition t0 whenReply engagedone    -> waitforcommands
                whenReply engagerefused -> waitrobotfree
   
   //what to do if robot alredy engaged?
   	State waitrobotfree{
    println("$name | Sorry, the robot is already engaged.")  color red
  	}
  	State waitforcommands{
  	println("$name | waiting for commands.") color red
  	}
 	Transition t1 whenMsg dodepositaction -> moverobottoindoor
 	
 	//move robot to indoor, then send chargetaken message and go to coldroom
 	State moverobottoindoor {
 		//move robot to indoor
 		onMsg(dodepositaction :dodepositaction(TICKETCODE)){
 			[#
 				TICKETCODE=payloadArg(0).toInt();#
 			]
 		}
 		println("$name | moving robot to indoor.") color red
 		request basicrobot -m moverobot:moverobot($INDOORX,$INDOORY)
 		
 	}
 	Transition t2 whenReply moverobotdone -> moverobottocoldroom
 				  whenReply moverobotfailed -> robotmovefailed 


	//when robot has taken kg from camion -> move robot to coldroom
	State moverobottocoldroom{
		//send event "robot is in indoor"
		println("$name | robot is in indoor") color red
		println("$name | moving robot to coldroom") color red
		emit robotisinindoor:robotisindoor(ok)
		request basicrobot -m moverobot:moverobot($COLDROOMX,$COLDROOMY)
	}
	Transition t3 whenReply moverobotdone -> depositactionended
 				  whenReply moverobotfailed -> robotmovefailed
	
	State depositactionended{
		
		emit depositactionended:depositactionended($TICKETCODE)
		println("$name | robot is in coldroom") color red
		println("$name | depositaction ended") color red
		println("$name | waiting for next move" ) color red
		
	} 
	Transition t4 whenTime 100    -> moverobottohome
	whenMsg dodepositaction -> moverobottoindoor
	 			  
				
	
	
	 
	State moverobottohome{
		//send event "robot is in home"
		request basicrobot -m moverobot:moverobot($HOMEX,$HOMEY)
	}
	Transition t5 whenReply moverobotdone -> emitrobotisinhome
 				  whenReply moverobotfailed -> robotmovefailed
 
 	State emitrobotisinhome{
 		emit robotisinhome: robotisinhome(ok)
 		println("$name | robot is in home") color red
 		
 	}Goto waitforcommands
 	//control failed robot moves
 	State robotmovefailed{
 		
 		println("$name | robot failed to move") color red
 		
 	}
 	
 	//fake gui
 
 	
	//wait next startcoldstoragerobot --> transition to moverobottoindoor
  	
  	
  	
}

 	 QActor serviceaccessgui context ctxcoldstorageservice{ 
	 	
	 	//initial state waiting for requests
	 	State s0 initial{
	 		discardMsg Off
	 		//run webgui
	 		println("$name | waiting request") color magenta
	 		
	 	}
 		/*Transition t1 whenRequest dostorefood-> storefood
 		whenRequest doinsertticket-> insertticket
 		
 		State storefood{
 			onMsg(dostorefood:dostorefood(kg)){
 				[#
 					var Kg=payloadArg(0);#
 				]
 				request coldstorageservice -m storefood:storefood($Kg)
 			}
 			
 		}
 		Transition t2 whenReply ticketaccepted-> handlestorefoodreply
 						whenReply ticketdenied-> handlestorefoodreply
 		
 		State handlestorefoodreply{
 			onMsg(ticketaccepted:ticketaccepted(TICKETNUMBER,TICKETSECRET)){
 				[#
 					var Ticketcode= payloadArg(0);
			var Ticketsecret= payloadArg(1);#
 				]
 				replyTo dostorefood with ticketaccepted:ticketaccepted($Ticketcode,$Ticketsecret)
 			}
 			onMsg(ticketdenied:ticketdenied(RESPONSE)){
 				[#
 					var Msg= payloadArg(0);
			#
 				]
			 replyTo dostorefood with ticketdenied:ticketdenied($Msg)	
 			}
 		}
 		Goto s0
 		State insertticket {
 			
 		onMsg(doinsertticket:doinsertticket(TICKETCODE, TICKETSECRET)){		
 			[# 
			var Ticketcode= payloadArg(0);
			var Ticketsecret= payloadArg(1);
		#]
		println("$name | sneding ticket to coldstorageservice") color magenta
		request coldstorageservice -m sendticket:sendticket($Ticketcode,$Ticketsecret)
		
 		}
 		
		
 		}
 		Transition t3 whenReply chargetaken-> handleinsertticketreply
 					whenReply ticketexpired-> handleinsertticketreply
 						whenReply ticketrejected-> handleinsertticketreply
 		State handleinsertticketreply{
 			onMsg(chargetaken:chargetaken(ARG)){
 				[#
 					var Ticketcode= payloadArg(0);
			var Ticketsecret= payloadArg(1);#
 				]
 				replyTo doinsertticket with chargetaken:chargetaken(ARG)
 				println("$name | robot has taken the load") color magenta
 			}
 			onMsg(ticketexpired:ticketexpired(ARG)){
 				[#
 					var Ticketcode= payloadArg(0);
			var Ticketsecret= payloadArg(1);#
 				]
 				replyTo doinsertticket with ticketexpired:ticketexpired(ARG)
 			}
 			onMsg(ticketrejected:ticketrejected(ARG)){
 				[#
 					var Ticketcode= payloadArg(0);
			var Ticketsecret= payloadArg(1);#
 				]
 				replyTo doinsertticket with ticketrejected:ticketrejected(ARG)
 			}
 			
 		}
 		Goto s0
 		
 		}
 	/*QActor guimok context ctxcoldstorageservice{
	 	State s0 initial{
	 		discardMsg Off
	 		println("$name | start request") color magenta
	 		request coldstorageservice -m storefood:storefood(25)
	 	}
 		Transition t1 whenReply ticketaccepted -> sendticket
 		
 		State sendticket {
 			
 		onMsg(ticketaccepted:ticketaccepted(TICKETCODE, TICKETSECRET,TIMESTAMP)){		
 			[# 
			var Ticketcode= payloadArg(0);
			var Ticketsecret= payloadArg(1);
		#]
		println("$name | sneding ticket to coldstorageservice") color magenta
		request coldstorageservice -m sendticket:sendticket($Ticketcode,$Ticketsecret)
		
 		}
 		
		
 		}
 		Transition t2 whenReply chargetaken-> end
 		State end{
 			println("$name | robot has taken the load") color magenta
 		}
 		Goto s0
 		*/
 		}
 

 