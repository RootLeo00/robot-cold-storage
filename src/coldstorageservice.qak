/*

 */      
System /* -msglog */ coldstorageservice 

//Dispatch startcmd   : start( ARG ) 					//sender:serviceaccessgui receiver:appl
Request storefood : storefood( KG ) 					//sender:serviceaccessgui receiver:coldstorageservice
Reply ticketaccepted : ticketaccepted( TICKETCODE, TICKETSECRET, TIMESTAMP ) 	//sender:coldstorageservice receiver:serviceaccessgui
Reply ticketdenied  : ticketdenied( ARG ) 		//sender:coldstorageservice receiver:serviceaccessgui

													//sender:coldstorage receiver:coldstorageservice

//Dispatch failticket : failticket(ARG) 
Dispatch sendticket: sendticket(TICKETCODE, TICKETSECRET, TIMESTAMP) 			//sender:serviceaccessgui receiver:coldstorageservice
Dispatch chargetaken : chargetaken(ARG)				//sender:coldstorageservice receiver:serviceaccessgui 
Reply ticketexpired: ticketexpired(ARG) 			//sender:coldstorageservice receiver:serviceaccessgui 


//start depositaction
Dispatch dodepositaction:dodepositaction(ARG)
//robot events
Event robotisinindoor:robotisinindoor(ARG)
Event robotisinhome:robotisinhome(ARG) 
Event depositactionended:depositactionended(ARG)
Dispatch gohome:gohome(ARG)													//emitter:serviceaccessgui listener:coldstorageservice
										 			//emitter:serviceaccessgui listener:fakeuser

 
//robot pos messages
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(ARG)


//-------------------------------------------------------------
Request howmanykgavailable : howmanykgavailable(ARG) //sender:coldstorageservice receiver:coldroom
Reply kgavailable : kgavailable(KG) //sender:coldroom receiver:coldstorageservice 
Dispatch updatekg : updatekg (KG) //sender:coldstorageservice receiver:coldroom

 


Request engage : engage(ARG)
Reply   engagedone    : engagedone(ARG) 
Reply   engagerefused : engagerefused(ARG)

Context ctxbasicrobot ip [host="127.0.0.1" port=8020 ]   
Context ctxcoldstorageservice ip [host="localhost" port=8038 ]
 
ExternalQActor basicrobot context ctxbasicrobot  
 
//Context ctxgui ip [host="127.0.0.1" port=8112]  
//ExternalQActor serviceaccessgui context ctxgui
 
/*  
 * ------------------------------------------------------------------
 *  coldstorageservice 
 * ------------------------------------------------------------------
*/      
QActor coldstorageservice context ctxcoldstorageservice{  
	 
		//*********** INTERAZIONE CON SERVICE ACCESS GUI
		[# var Kgtoload : Long = 0; #]
		State s0 initial {	  
			println("&&&  appl coldstorageservice is now ACTIVE ...") 
			//tutti i messaggi che arrivano quando sono in uno degli stati successivi
			//se non considerati, non vengono scartati, ma vengono memorizzati in coda e presi in carico successivamente
			//quando si andrà in uno stato che potrà processarli
			discardMsg Off  //default: discardMsg On
	    	println("currentMsg=${currentMsg}")
	   	}  
	   	Transition t0 whenRequest storefood -> askhowmanykgoccupied
	    
	  	State askhowmanykgoccupied{ 
	  		onMsg(storefood:storefood(KG)){
	  		[# Kgtoload = payloadArg(0).toLong(); #] //payloadArg(0) == KG
	  		//chiedi a cold room quanto spazio è disponibile
	  		request coldroom -m howmanykgavailable : howmanykgavailable
	  		} 
		}
		Transition t0 whenReply kgavailable -> checkifthereisenoughspace
		
		State checkifthereisenoughspace {
			[# var Kgavailable = payloadArg(0).toLong(); 
			   var TICKETCODE = 100;
			   var TICKETSECRET= "000";
			   var TIMESTAMP = "ciao"; 
			#]
			if [# Kgtoload <= Kgavailable#] { 
				replyTo storefood with ticketaccepted : ticketaccepted($TICKETCODE, $TICKETSECRET, $TIMESTAMP)
			}
			else{
				replyTo storefood with ticketdenied : ticketdenied
			}
		}   
	  	Transition t0 whenMsg sendticket-> startcoldstoragerobot
	  	
	  	
	  	//*********** INTERAZIONE CON ROBOT
	  	State startcoldstoragerobot{
	  		//forward serviceaccessgui -m chargetaken : chargetaken(ok)
	  		
	  		//send start command to transporttrolley
	  		forward transporttrolley -m dodepositaction : dodepositaction
	  	} Goto updatecoldstorage
	  	
	  	
	  	
	  	State updatecoldstorage {
	  		//add kg already arrived to cold storage
	  		forward coldroom -m updatekg : updatekg($Kgtoload)
	  		
	  	}
	   	Transition t0 whenRequest storefood -> askhowmanykgoccupied
  		
  	}
  

/*   
 * ------------------------------------------------------------------
 *  coldroom
 * ------------------------------------------------------------------
*/     
QActor coldroom context ctxcoldstorageservice{  
	[# var Kgstored : Long = 100 #]   //TODO
	
	State s0 initial {	 
		println("&&&  appl coldroom is now ACTIVE ...") 
		printCurrentMessage
   	}  
	//wait request on info kg
	Transition t0 whenRequest howmanykgavailable -> replywithcoldroomspacestate
				  whenMsg updatekg -> handleupdateKg
	
	
	State replywithcoldroomspacestate{ 
		//send the actual state of the space
		replyTo howmanykgavailable with kgavailable : kgavailable($Kgstored)
	}
	//wait request on info kg
	Transition t0 whenRequest howmanykgavailable -> replywithcoldroomspacestate
				  whenMsg updatekg -> handleupdateKg
	
	//request to update kg
	State handleupdateKg{
		//update storage
		[# 
			var insertkg = payloadArg(0).toLong();
			Kgstored += insertkg;
		#]
	}
}


/*  
 * ------------------------------------------------------------------
 *  transporttrolley
 * ------------------------------------------------------------------
*/      
QActor transporttrolley context ctxcoldstorageservice{     
	//try to engage basicrobot on startup
	[#
		var COLDROOMX=3;
		var COLDROOMY=5;
		var INDOORX=1;
		var INDOORY=6;
		var HOMEX=0;
		var HOMEY=0;
	#]
	State ss0 initial{
		//set home,indoor,coldroom positions
		
			//usefull for keep tracking of coldstorageservice request operations
	discardMsg Off
    println("$name request engage") color green
    request basicrobot -m engage : engage( robotposclient )
  	}
   	Transition t0 whenReply engagedone    -> waitforcommands
                whenReply engagerefused -> waitrobotfree
   
   //what to do if robot alredy engaged?
   	State waitrobotfree{
    println("$name | Sorry, the robot is already engaged.")  color green
  	}
  	State waitforcommands{
  	println("$name | waiting for commands.")  color green
  	}
 	Transition t4 whenMsg dodepositaction -> moverobottoindoor
 	
 	//move robot to indoor, then send chargetaken message and go to coldroom
 	State moverobottoindoor {
 		//move robot to indoor
 		request basicrobot -m moverobot:moverobot($INDOORX,$INDOORY)
 	}
 	Transition t5 whenReply moverobotdone -> moverobottocoldroom
 				  whenReply moverobotfailed -> robotmovefailed 


	//when robot has taken kg from camion -> move robot to coldroom
	State moverobottocoldroom{
		//send event "robot is in indoor"
		emit robotisinindoor:robotisindoor(ok)
		request basicrobot -m moverobot:moverobot($COLDROOMX,$COLDROOMY)
	}
	Transition t2 whenReply moverobotdone -> depositactionended
 				  whenReply moverobotfailed -> robotmovefailed
	
	State depositactionended{
		emit depositactionended:depositactionended(ok)
		println("$name | waiting for next move" )
		
	} 
	Transition t6 whenMsg dodepositaction -> moverobottoindoor
	 			  whenMsg gohome-> moverobottohome
				
	
	
	
	State moverobottohome{
		//send event "robot is in home"
		request basicrobot -m moverobot:moverobot($HOMEX,$HOMEY)
	}
	Transition t3 whenReply moverobotdone -> emitrobotisinhome
 				  whenReply moverobotfailed -> robotmovefailed
 
 	State emitrobotisinhome{
 		emit robotisinhome: robotisinhome(ok)
 		println("$name | robot failed to move") color red
 		
 	}Goto waitforcommands
 	//control failed robot moves
 	State robotmovefailed{
 		println("$name | robot failed to move") color red
 		
 	}
 	
	//wait next startcoldstoragerobot --> transition to moverobottoindoor
  	
  	
  	
}
 

 