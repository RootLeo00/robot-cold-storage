/*

 */  
System /* -msglog */ appl1qak 

//Dispatch startcmd   : start( ARG ) 			//sender:serviceaccessgui receiver:appl
Request createticket : createticket( KG ) 		//sender:serviceaccessgui receiver:coldstorageservice
Reply acceptticket    : acceptticket( TICKETCODE ) 	//sender:coldstorageservice receiver:serviceaccessgui
Reply denyticket    : denyticket( ARG ) 		//sender:coldstorageservice receiver:serviceaccessgui

Request getcoldroomspace : getcoldroomspace( ARG ) 				//sender:coldstorageservice receiver:coldstorage
Reply coldroomspace : coldroomspace(KG)						//sender:coldstorage receiver:coldstorageservice
Reply enoughspace    : enoughspace( ARG )
Reply notenoughspace    : notenoughspace( ARG )
//Dispatch failticket : failticket(ARG) 
Request sendcamion : sendcamion(ARG) 			//sender:serviceaccessgui receiver:coldstorageservice
Reply chargetaken : chargetaken(ARG) 			//sender:coldstorageservice receiver:serviceaccessgui 

Event robotincoldstorage : robotincoldstorage(ARG)  //emitter:coldstorage listener:coldstorageservice
Event robotisindoor : robotisindoor(ARG)  			//emitter:coldstoragerobot listener:coldstorageservice
Event robotisinstorage : robotisinstorage(ARG)  	//emitter:coldstoragerobot listener:coldstorageservice
Event robotisinhome : robotisinhome(ARG)  			//emitter:coldstoragerobot listener:coldstorageservice
Event guicmd : guicmd(COMMAND, PARAMETER) 			//emitter:serviceaccessgui listener:coldstorageservice
Event ticketaccepted : ticketaccepted(TICKETCODE) 			//emitter:serviceaccessgui listener:fakeuser
Dispatch startrobotservice : startrobotservice(ARG) //sender:coldstorageservice receiver:coldstoragerobot
Dispatch updatestorage : updatestorage(KG) 			//sender:coldstorageservice receiver:coldstorage

//robot pos messages
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(ARG)

Context ctxall ip [host="localhost" port=8720]
Context ctxrobotpos ip [host="127.0.0.1" port=8111]  
//Context ctxgui ip [host="127.0.0.1" port=8112]  

ExternalQActor robotpos context ctxrobotpos
//ExternalQActor serviceaccessgui context ctxgui

/*  
 * ------------------------------------------------------------------
 *  coldstorageservice 
 * ------------------------------------------------------------------
*/      
QActor coldstorageservice context ctxall{  
	[# var Mass = 0 #]       
	State s0 initial {	 
		println("&&&  appl coldstorageservice is now ACTIVE ...") 
		//tutti i messaggi che arrivano quando sono in uno degli stati successivi
		//se non considerati, non vengono scartati, ma vengono memorizzati in coda e presi in carico successivamente
		//quando si andrà in uno stato che potrà processarli
		discardMsg Off  //default: discardMsg On
    	println("currentMsg=${currentMsg}")
   	}  
   	Transition t0 whenRequest createticket -> startticket
    
  	State startticket{ 
  		onMsg(createticket:createticket(MASS)){
  		[# var Mass = payloadArg(0).toLong() #]
  		//chiedi a cold room quanto spazio è occupato
  		request coldroom -m getcoldroomspace : getcoldroomspace(ok)
  		} 	
	}
	Transition t0 whenReply coldroomspace -> answerticketrequest
	 		 
	State answerticketrequest{
		//recupera parametro della richiesta
		//check if there is enough space
		//#TODO fare controllo vero con Mass
		[#  if( (Mass - space) < 0 ) { #]
		//send message that ticket is not accepted
			replyTo createticket with denyticket : denyticket(ok)	 
		[# } #] 	
		[#  else  {
			val TICKETCODE="faketicket" 
		#] 	
		//send ticket code to gui
			replyTo createticket with acceptticket : acceptticket($TICKETCODE)
		[# } #] 
	}	  
  	Transition t0 whenRequest sendcamion -> startcoldstoragerobot
  	
  	State startcoldstoragerobot{
  		replyTo sendcamion with chargetaken : chargetaken(ok)
  		//send start command to coldstoragerobot
  		forward coldstoragerobot -m  startrobotservice : startrobotservice(ok)
  	}
  	Transition t1 whenEvent  robotincoldstorage -> updatecoldstorage
  	
  	State updatecoldstorage {
  		//add kg already arrived to cold storage
  		forward coldroom -m updatestorage:updatestorage($Mass)
  	}
  	
   	Transition t0 whenRequest createticket -> startticket
  		
  	}
  

/*  
 * ------------------------------------------------------------------
 *  coldroom
 * ------------------------------------------------------------------
*/     
QActor coldroom context ctxall{  
	[# var SpaceKg = 100 #]   //TODO
		State s0 initial {	 
		println("&&&  appl coldroom is now ACTIVE ...") 
   	}  
	//wait request on info kg
	Transition t0 whenRequest getcoldroomspace -> getcoldroomspacestate
	
	State getcoldroomspacestate{
		//send the actual state of the space
		[# var Mass = payloadArg(0).toLong() #]
		replyTo getcoldroomspace with coldroomspace : coldroomspace($SpaceKg)
	}
	//requesto to update kg
		//wait request on info kg
	Transition t0 whenMsg updatestorage -> updateKg
	
		State updateKg{
		//update storage
	}
	Transition t0 whenRequest getcoldroomspace -> getcoldroomspacestate
}


/*  
 * ------------------------------------------------------------------
 *  coldstoragerobot
 * ------------------------------------------------------------------
*/     
QActor coldstoragerobot context ctxall{     
	
	State s0 initial{
		println("&&&  appl coldstoragerobot is now ACTIVE ...") 
	}
	//when coldstorageservice sends start command --> start moving robot
	Transition t0 whenMsg startrobotservice -> moverobottoindoor
	State moverobottoindoor{
		//send event "robot is in indoor"
		request robotpos -m moverobot:moverobot(1,6)
	}
	Transition t0 whenReply moverobotdone -> moverobottostorage
 				  whenReply moverobotfailed -> moverobottohome
	//when robot has taken kg from camion -> move robot to coldstorage
	State moverobottostorage{
		//send event "robot is in indoor"
		emit robotisindoor : robotisindoor(ok)
		request robotpos -m moverobot:moverobot(3,5)
	}
	Transition t0 whenReply moverobotdone -> moverobottohome
 					whenReply moverobotfailed -> moverobottohome
	//when robot has placed kg into storage -> move robot to home
	State moverobottohome{
		//send event "robot is in home"
		onMsg(moverobotdone:moverobotdone(ok)){
			emit robotisinstorage : robotisinstorage(ok)
		}
		emit robotisinhome : robotisinhome(ok)
	}
	//wait next startcoldstoragerobot --> transition to moverobottoindoor
  	Transition t1 whenMsg startrobotservice -> moverobottoindoor
  	
  	
}


/*
--------------------------------------
 serviceaccessgui
--------------------------------------
*/
QActor serviceaccessgui context ctxall{ 
	State s0 initial{
		printCurrentMessage		
		//[# gui.GuiUtils.createGui(myself) #] 	
	}
	Goto waitticketrequest
	
	State waitticketrequest{}
	Transition t0 whenEvent guicmd -> handleticketrequest
	
	State handleticketrequest {
		printCurrentMessage
		// request ticket to coldstorageservice actor
		onMsg ( guicmd : guicmd(createticket,MASS)){
			/*[# CommUtils.outmagenta("request ticket creation") 
				Mass = payloadArg(1); 
			#]*/
			[# val Mass=10 #]
			request coldstorageservice -m createticket : createticket($Mass) 
		}
		
	} 
	Transition t1 whenReply acceptticket -> ticketaccepted
				  whenReply denyticket -> ticketdenied
		
	State ticketaccepted {
		//print ticket
		[# CommUtils.outgreen("ticket") #]
		onMsg( acceptticket : acceptticket(TICKETCODE)){
			[# 
				CommUtils.outmagenta("ticket: ${TICKETCODE}"); 
			#]
			emit ticketaccepted:ticketaccepted(ok)
		}
	}
	Transition t1 whenEvent guicmd -> handleticketfromuser	
	
	State handleticketfromuser{
		// send sendcamion request to send truck in the indoor area
		onMsg ( guicmd : guicmd(insertticket,TICKET)){
//			[# CommUtils.outmagenta("insert ticket"); 
//				Ticket  = payloadArg(1);
//			#]
			[# 
				Ticket  = "faketicket";
			#]
			request coldstorageservice -m sendcamion : sendcamion($TICKET) 
		}
	}
	Goto waitticketrequest
	
	State  ticketdenied{
		//print red
		[# CommUtils.outred("not enough space") #]
		
	}
	Goto waitticketrequest
}

/*  
 * ------------------------------------------------------------------
 *  fakeuser
 * ------------------------------------------------------------------
 * utente fake per sprint1, in attesa di creare una console remota 
 */   
QActor fakeuser context ctxall{
	State s0 initial{
		printCurrentMessage		
		 emit guicmd:guicmd(createticket,10)
			
	}
	Transition t0 whenEvent ticketaccepted -> sendticket
	
	State sendticket{
		emit guicmd:guicmd(insertticket,$TICKETCODE)
	}
}

 