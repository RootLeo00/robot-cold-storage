/*

 */  
System /* -msglog */ appl1qak 

//Dispatch startcmd   : start( ARG ) 			//sender:serviceaccessgui receiver:appl
Request createticket : createticket( ARG ) 			//sender:serviceaccessgui receiver:coldstorageservice
Reply acceptticket    : acceptticket( ARG )
Reply denyticket    : denyticket( ARG ) //sender:coldstorageservice receiver:serviceaccessgui

Request checkspace : checkspace( ARG ) 			//sender:coldstorageservice receiver:coldstorage
Reply enoughspace    : enoughspace( ARG )
Reply notenoughspace    : notenoughspace( ARG )

//Dispatch failticket : failticket(ARG) 
Dispatch camionin : camionin(ARG) //sender:serviceaccessgui receiver:coldstorageservice

Dispatch ticketgenerated : ticketgenerated(CODE) //sender:coldstorageservice receiver:serviceaccessgui

Event robotincoldstorage : robotincoldstorage(ARG) //emitter:coldstorage listener:coldstorageservice
Event robotisindoor : robotisindoor(ARG)  //emitter:coldstoragerobot listener:coldstorageservice
Event robotisinstorage : robotisinstorage(ARG)  //emitter:coldstoragerobot listener:coldstorageservice
Event robotisinhome : robotisinhome(ARG)  //emitter:coldstoragerobot listener:coldstorageservice
Event guicmd : guicmd(ARG) //emitter:serviceaccessgui listener:coldstorageservice

Dispatch startrobotservice : startrobotservice(ARG)  //sender:coldstorageservice receiver:coldstoragerobot

Dispatch updatestorage : updatestorage(KG) //sender:coldstorageservice receiver:coldstorage

Context ctxall  ip [host="localhost" port=8720]
Context ctxrobotpos   ip [host="127.0.0.1" port=8111] 

ExternalQActor worker context ctxrobotpos

/*  
 * ------------------------------------------------------------------
 *  coldstorageservice 
 * ------------------------------------------------------------------
*/     

QActor coldstorageservice context ctxall{         
 

	State s0 initial {	 
		println("&&&  appl coldstorageservice is now ACTIVE ...") 
		//Da spostare in basicrobot ...
		[#  //unibo.basicomm23.utils.Connection.trace=true
			utils.Appl1Startup.setConfigFilePath("./robotConfig.json");
			CommUtils.outblue(name + " | init $currentMsg"   ) 
		#] 	
		
//		delegate "isrunning" to obsforpath
   	}  
   	Transition t0 whenRequest createticket -> startticket
    
  	State startticket{  	
  		println("startticket  ") 
  		//ask cold storage if there is enough space
  		request coldstorage -m checkspace : checkspace($kg)
  			  
	}
	Transition t0 whenReply  enoughspace -> doticket   
	 			  whenReply  notenoughspace -> failticket   
	 		
	State failticket{
		//send message that ticket is not accepted
		replyTo createticket with denyticket : denyticket(ARG)
	}	  
	State doticket{     	
		//generate ticket code
		
		//send ticket code to gui
		forward serviceaccessgui -m ticketgenerated($code)
		
     }
  	Transition t0 whenMsg camionin -> startcoldstoragerobot
  	
  	State startcoldstoragerobot{
  		
  		//send start command to coldstoragerobot
  		forward coldstoragerobot -m  startrobotservice : startrobotservice(arg)

  	}
  	Transition t1 whenEvent  robotincoldstorage -> updatecoldstorage
  	
  	State updatecoldstorage {
  		
  		//add kg already arrived to cold storage
  		forward coldstorage -m updatestorage($kg)
  	}
  	
   	Transition t0 whenRequest createticket -> startticket
  		
  	}
  

/*  
 * ------------------------------------------------------------------
 *  coldstorage
 * ------------------------------------------------------------------
*/     

QActor coldstorage context ctxall{     
	
		State s0 initial {	 
		println("&&&  appl coldstorage is now ACTIVE ...") 
	
   	}  
	
	//wait request on info kg
	Transition t0 whenRequest checkspace -> checkspacestate
	
	State checkspacestate{
		//check if there is enough space
		
		replyTo checkspace with enoughspace : enoughspace(ARG)
//		replyTo coldstorageservice with notenoughspace : notenoughspace()
	}
	
	//requesto to update kg
		//wait request on info kg
	Transition t0 whenMsg updatestorage -> updateKg
	
		State updateKg{
		//update storage
	}
	Transition t0 whenRequest checkspace -> checkspacestate
	
}


/*  
 * ------------------------------------------------------------------
 *  coldstoragerobot
 * ------------------------------------------------------------------
*/     

QActor coldstoragerobot context ctxall{     
	
	State s0 initial{
		
	}
	//when coldstorageservice sends start command --> start moving robot
	Transition t0 whenMsg startrobotservice -> moverobottoindoor
	State moverobottoindoor{
		//send event "robot is in indoor"
		emit robotisindoor : robotisindoor(ARG)
		
	}
	Goto moverobottostorage
	//when robot has taken kg from camion -> move robot to coldstorage
	State moverobottostorage{
		//send event "robot is in storage"
		emit robotisinstorage : robotisinstorage(ARG)
	}
	Goto moverobottohome
	//when robot has placed kg into storage -> move robot to home
	State moverobottohome{
		//send event "robot is in home"
		emit robotisinhome : robotisinhome(ARG)
	}
	//wait next startcoldstoragerobot --> transition to moverobottoindoor
  	Transition t1 whenMsg startrobotservice -> moverobottoindoor
}


/*
--------------------------------------
 serviceaccessgui
--------------------------------------
*/
/*
 * Usa un supporto che emette streamevent 
   Converte streamevent in comando a appl */
QActor serviceaccessgui context ctxall{
	State s0 initial{
		printCurrentMessage		
		[# gui.GuiUtils.createGui(myself) #]	
			
	}
	Goto waitevents
	
	State waitevents{}
	Transition t0 whenEvent guicmd -> handleGuicmd
	              whenReply getpath -> handleGuigetpath
	
	State handleGuicmd {
		printCurrentMessage
		onMsg ( guicmd : guicmd(createticket)){
			[# CommUtils.outmagenta("serviceaccessgui createticket") #]
			request coldstorageservice -m createticket : createticket(serviceaccessgui) 
		}
	} 
		Transition t1 whenReply acceptticket -> ticketaccepted
						whenReply denyticket -> ticketdenied
		
	State ticketaccepted {
		
	}	
	
	State  ticketdenied{
	}
}

 