/*

 */  
System /* -msglog */ appl1qak 

//Dispatch startcmd   : start( ARG ) 			//sender:serviceaccessgui receiver:appl
Request createticket : createticket( ARG ) 			//sender:serviceaccessgui receiver:coldstorageservice
Reply acceptticket    : acceptticket( ARG ) 		//sender:coldstorageservice receiver:serviceaccessgui
Reply denyticket    : denyticket( ARG ) //sender:coldstorageservice receiver:serviceaccessgui

Request checkspace : checkspace( ARG ) 			//sender:coldstorageservice receiver:coldstorage
Reply enoughspace    : enoughspace( ARG )
Reply notenoughspace    : notenoughspace( ARG )

//Dispatch failticket : failticket(ARG) 
Dispatch camionin : camionin(ARG) //sender:serviceaccessgui receiver:coldstorageservice

Event robotincoldstorage : robotincoldstorage(ARG) //emitter:coldstorage listener:coldstorageservice
Event robotisindoor : robotisindoor(ARG)  //emitter:coldstoragerobot listener:coldstorageservice
Event robotisinstorage : robotisinstorage(ARG)  //emitter:coldstoragerobot listener:coldstorageservice
Event robotisinhome : robotisinhome(ARG)  //emitter:coldstoragerobot listener:coldstorageservice
Event guicmd : guicmd(COMMAND, PARAMETER) //emitter:serviceaccessgui listener:coldstorageservice

Dispatch startrobotservice : startrobotservice(ARG)  //sender:coldstorageservice receiver:coldstoragerobot

Dispatch updatestorage : updatestorage(KG) //sender:coldstorageservice receiver:coldstorage
//robot pos messages
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(ARG)

Context ctxall  ip [host="localhost" port=8720]
Context ctxrobotpos   ip [host="127.0.0.1" port=8111] 

ExternalQActor worker context ctxrobotpos

/*  
 * --------------------------------------------------------ARG----------
 *  coldstorageservice 
 * ------------------------------------------------------------------
*/     

QActor coldstorageservice context ctxall{         
 

	State s0 initial {	 
		println("&&&  appl coldstorageservice is now ACTIVE ...") 
			
		
   	}  
   	Transition t0 whenRequest createticket -> startticket
    
  	State startticket{ 
  		onMsg(createticket:createticket(MASS)){
  			//[#
  		//		Mass = payloadArg(0);	
  		//	#]
  		println("startticket  ") 
  		//ask cold storage if there is enough space
  		request coldstorage -m checkspace : checkspace(10)
  			
  		} 	
  			  
	}
	Transition t0 whenReply  enoughspace -> doticket   
	 			  whenReply  notenoughspace -> failticket   
	 		
	State failticket{
		//send message that ticket is not accepted
		replyTo createticket with denyticket : denyticket(deny)
	}	  
	State doticket{     	
		//generate ticket code
		//[#
		//	Ticket="paperinik"	
		//#]
		//send ticket code to gui
		replyTo createticket with acceptticket : acceptticket(paperinik)

		
     }
  	Transition t0 whenMsg camionin -> startcoldstoragerobot
  	
  	State startcoldstoragerobot{
  		
  		//send start command to coldstoragerobot
  		forward coldstoragerobot -m  startrobotservice : startrobotservice(arg)

  	}
  	Transition t1 whenEvent  robotincoldstorage -> updatecoldstorage
  	
  	State updatecoldstorage {
  		
  		//add kg already arrived to cold storage
  		forward coldstorage -m updatestorage:updatestorage(10)
  	}
  	
   	Transition t0 whenRequest createticket -> startticket
  		
  	}
  

/*  
 * ------------------------------------------------------------------
 *  coldstorage
 * ------------------------------------------------------------------
*/     

QActor coldstorage context ctxall{     
	
		State s0 initial {	 
		println("&&&  appl coldstorage is now ACTIVE ...") 
	
   	}  
	
	//wait request on info kg
	Transition t0 whenRequest checkspace -> checkspacestate
	
	State checkspacestate{
		//check if there is enough space
		
		replyTo checkspace with enoughspace : enoughspace(ARG)
//		replyTo coldstorageservice with notenoughspace : notenoughspace()
	}
	
	//requesto to update kg
		//wait request on info kg
	Transition t0 whenMsg updatestorage -> updateKg
	
		State updateKg{
		//update storage
	}
	Transition t0 whenRequest checkspace -> checkspacestate
	
}


/*  
 * ------------------------------------------------------------------
 *  coldstoragerobot
 * ------------------------------------------------------------------
*/     

QActor coldstoragerobot context ctxall{     
	
	State s0 initial{
		
	}
	//when coldstorageservice sends start command --> start moving robot
	Transition t0 whenMsg startrobotservice -> moverobottoindoor
	State moverobottoindoor{
		//send event "robot is in indoor"
		request worker -m moverobot:moverobot(1,6)
		
		
	}
	Transition t0 whenReply moverobotdone -> moverobottostorage
 					whenReply moverobotfailed -> moverobottohome
	//when robot has taken kg from camion -> move robot to coldstorage
	State moverobottostorage{
		//send event "robot is in indoor"
		emit robotisindoor : robotisindoor(ARG)
		request worker -m moverobot:moverobot(3,5)
		
	}
	Transition t0 whenReply moverobotdone -> moverobottohome
 					whenReply moverobotfailed -> moverobottohome
	
	//when robot has placed kg into storage -> move robot to home
	State moverobottohome{
		//send event "robot is in home"
		onMsg(moverobotdone:moverobotdone(ARG)){
			emit robotisinstorage : robotisinstorage(ARG)
		}
		emit robotisinhome : robotisinhome(ARG)
	}
	//wait next startcoldstoragerobot --> transition to moverobottoindoor
  	Transition t1 whenMsg startrobotservice -> moverobottoindoor
  	
  	
}


/*
--------------------------------------
 serviceaccessgui
--------------------------------------
*/
/*
 * Usa un supporto che emette streamevent 
   Converte streamevent in comando a appl */
QActor serviceaccessgui context ctxall{ 
	State s0 initial{
		printCurrentMessage		
		[# gui.GuiUtils.createGui(myself) #]	
			
	}
	Goto waitticketrequest
	
	State waitticketrequest{}
	Transition t0 whenEvent guicmd -> handleticketrequest
	             
	
	State handleticketrequest {
		printCurrentMessage
		// request ticket to coldstorageservice actor
		onMsg ( guicmd : guicmd(createticket,MASS)){
			/*[# CommUtils.outmagenta("request ticket creation") 
				Mass = payloadArg(1);
			#]*/
			request coldstorageservice -m createticket : createticket(10) 
		}
		
		
	} 
		Transition t1 whenReply acceptticket -> ticketaccepted
						whenReply denyticket -> ticketdenied
		
	State ticketaccepted {
		//print ticket
		[# CommUtils.outgreen("ticket"+ticket) #]
		onMsg( acceptticket : acceptticket(TICKET)){
			[# 
				Ticket  = payloadArg(0);
				CommUtils.outmagenta("ticket: "+ Ticket); 
			#]
			
		}
		
	}
	Transition t1 whenEvent guicmd -> handleticketfromuser	
	
	State handleticketfromuser{
		// send camionin dispatch when truck is in the indoor area
		onMsg ( guicmd : guicmd(insertticket,TICKET)){
			//[# CommUtils.outmagenta("insert ticket"); 
			//	Ticket  = payloadArg(1);
			//#]
			forward coldstorageservice -m camionin : camionin(paperino) 
		}
	}
	Goto waitticketrequest
	
	State  ticketdenied{
		//print red
		[# CommUtils.outred("not enough space") #]
		
	}
	Goto waitticketrequest
}

 