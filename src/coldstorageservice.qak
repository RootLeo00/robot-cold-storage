/*

 */     
System /* -msglog */ coldstorageservice 

//Dispatch startcmd   : start( ARG ) 			//sender:serviceaccessgui receiver:appl
Request createticket : createticket( KG ) 		//sender:serviceaccessgui receiver:coldstorageservice
Reply acceptticket    : acceptticket( TICKETCODE ) 	//sender:coldstorageservice receiver:serviceaccessgui
Reply denyticket    : denyticket( ARG ) 		//sender:coldstorageservice receiver:serviceaccessgui

Request getcoldroomspace : getcoldroomspace( ARG ) 			//sender:coldstorageservice receiver:coldstorage
Reply coldroomspace : coldroomspace(KG)						//sender:coldstorage receiver:coldstorageservice

//Dispatch failticket : failticket(ARG) 
Dispatch sendtruck : sendtruck(ARG) 			//sender:serviceaccessgui receiver:coldstorageservice
Dispatch chargetaken : chargetaken(ARG) 			//sender:coldstorageservice receiver:serviceaccessgui 

			//emitter:serviceaccessgui listener:coldstorageservice
	//emitter:serviceaccessgui listener:fakeuser
Dispatch startrobotservice : startrobotservice(ARG) //sender:coldstorageservice receiver:coldstoragerobot
Dispatch updatestorage : updatestorage(KG) 			//sender:coldstorageservice receiver:coldstorage

Dispatch alarm : alarm(ARG)

//robot pos messages
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(ARG)


Context ctxserviceaccessgui ip [host="localhost" port=8720]
Context ctxcoldstorageservice ip [host="localhost" port=8720]
Context ctxsonar ip [host="localhost" port=8720]
Context ctxbasicrobot ip [host="10.0.0.3" port=8020]  
//Context ctxgui ip [host="127.0.0.1" port=8112]  

ExternalQActor basicrobot context ctxbasicrobot
//ExternalQActor serviceaccessgui context ctxgui

/*  
 * ------------------------------------------------------------------
 *  coldstorageservice 
 * ------------------------------------------------------------------
*/      
QActor coldstorageservice context ctxcoldstorageservice{  
	[# var Mass = 0 #]       
	State s0 initial {	 
		println("&&&  appl coldstorageservice is now ACTIVE ...") 
		//tutti i messaggi che arrivano quando sono in uno degli stati successivi
		//se non considerati, non vengono scartati, ma vengono memorizzati in coda e presi in carico successivamente
		//quando si andrà in uno stato che potrà processarli
		discardMsg Off  //default: discardMsg On
    	println("currentMsg=${currentMsg}")
   	}  
   	Transition t0 whenRequest createticket -> startticket
    
  	State startticket{ 
  		onMsg(createticket:createticket(MASS)){
  		[# var Mass = payloadArg(0).toLong() #] //payloadArg(0) == MASS
  		//chiedi a cold room quanto spazio è occupato
  		request coldroom -m getcoldroomspace : getcoldroomspace(ok)
  		} 	
	}
	Transition t0 whenReply coldroomspace -> answerticketrequest
	 		 
	State answerticketrequest{
		//recupera parametro della richiesta
		//check if there is enough spacectxserviceaccessgui
		//#TODO fare controllo vero con Mass
		[#  
			var Space= payloadArg(0).toLong()
			if( (Space - Mass ) < 0 ) { #
		]
		//send message that ticket is not accepted
			replyTo createticket with denyticket : denyticket(ok)	 
		[# } #] 	
		[#  else  {
			val TICKETCODE="faketicket" 
		#] 	
		//send ticket code to gui
			replyTo createticket with acceptticket : acceptticket($TICKETCODE)
		[# } #] 
	}	  
  	Transition t0 whenMsg sendtruck-> startcoldstoragerobot
  	
  	State startcoldstoragerobot{
  		forward serviceaccessgui -m chargetaken : chargetaken(ok)
  		//send start command to coldstoragerobot
  		forward transporttrolley
  		 -m  startrobotservice : startrobotservice(ok)
  	}
  	
  	
  	State updatecoldstorage {
  		//add kg already arrived to cold storage
  		forward coldroom -m updatestorage:updatestorage($Mass)
  	}
  	
   	Transition t0 whenRequest createticket -> startticket
  		
  	}
  

/*   
 * ------------------------------------------------------------------
 *  coldroom
 * ------------------------------------------------------------------
*/     
QActor coldroom context ctxcoldstorageservice{  
	[# var SpaceKg = 100 #]   //TODO
		State s0 initial {	 
		println("&&&  appl coldroom is now ACTIVE ...") 
   	}  
	//wait request on info kg
	Transition t0 whenRequest getcoldroomspace -> getcoldroomspacestate
	
	State getcoldroomspacestate{ 
		//send the actual state of the space
		replyTo getcoldroomspace with coldroomspace : coldroomspace($SpaceKg)
	}
	//requesto to update kg
		//wait request on info kg
	Transition t0 whenMsg updatestorage -> updateKg
	
		State updateKg{
		//update storage
	}
	Transition t0 whenRequest getcoldroomspace -> getcoldroomspacestate
}


/*  
 * ------------------------------------------------------------------
 *  coldstoragerobot
 * ------------------------------------------------------------------
*/      
QActor transporttrolley context ctxcoldstorageservice{     
	
	State s0 initial{
		println("&&&  appl coldstoragerobot is now ACTIVE ...") 
	}
	//when coldstorageservice sends start command --> start moving robot
	Transition t0 whenMsg startrobotservice -> moverobottoindoor
	State moverobottoindoor{
		//send event "robot is in indoor"
		request basicrobot -m moverobot:moverobot(1,6)
	}
	Transition t1 whenReply moverobotdone -> moverobottostorage
 				  whenReply moverobotfailed -> moverobottohome
	//when robot has taken kg from camion -> move robot to coldstorage
	State moverobottostorage{
		//send event "robot is in indoor"
		
		request basicrobot -m moverobot:moverobot(3,5)
	}
	Transition t2 whenReply moverobotdone -> moverobottohome
 				  whenReply moverobotfailed -> moverobottohome
	//when robot has placed kg into storage -> move robot to home
	State moverobottohome{
		//send event "robot is in home"
		
		request basicrobot -m moverobot:moverobot(1,1)
	}
	Transition t3 whenReply moverobotdone -> emitrobotisinhome
 				  whenReply moverobotfailed -> moverobottohome
 	State emitrobotisinhome{
 		
 	}
	//wait next startcoldstoragerobot --> transition to moverobottoindoor
  	Transition t4 whenMsg startrobotservice -> moverobottoindoor
  	
  	
}


/*
--------------------------------------
 serviceaccessgui
--------------------------------------
*/
QActor serviceaccessgui context ctxserviceaccessgui{ 
	State s0 initial{
		printCurrentMessage		
		//[# gui.GuiUtils.createGui(myself) #] 	
	}
	Goto waitticketrequest
	
	State waitticketrequest{}
	
	
	State handleticketrequest {
		printCurrentMessage
		// request ticket to coldstorageservice actor
		
			request coldstorageservice -m createticket : createticket($Mass) 
		
		
	} 
	Transition t1 whenReply acceptticket -> ticketaccepted
				  whenReply denyticket -> ticketdenied
		
	State ticketaccepted {
		//print ticket
		[# CommUtils.outgreen("ticket") #]
		onMsg( acceptticket : acceptticket(TICKETCODE)){
			[# 
				val TicketCode= payloadArg(0)
				CommUtils.outmagenta("ticket: ${TicketCode}"); 
			#]
			
		}
	}
	
	State handleticketfromuser{
		// send sendcamion request to send truck in the indoor area
	
			forward coldstorageservice -m sendtruck: sendcamion($Ticket) 
		
	}
	Goto waitticketrequest
	
	State  ticketdenied{ 
		//print red
		[# CommUtils.outred("not enough space") #]
		
	}
	Goto waitticketrequest
}

/*  
 * ------------------------------------------------------------------
 *  fakeuser
 * ------------------------------------------------------------------
 * utente fake per sprint1, in attesa di creare una console remota 
 */   
/*QActor fakeuser context ctxall{
	State s0 initial{
		printCurrentMessage		
		 emit guicmd:guicmd(createticket,10)
			
	}
	Transition t0 whenEvent ticketaccepted -> sendticket
	
	State sendticket{
			[# CommUtils.outmagenta("[state] send ticket"); 
				val TicketCode  = payloadArg(0);
			#]
		emit guicmd:guicmd(insertticket,$TicketCode)
	}
}*/
/*  
 * ------------------------------------------------------------------
 *  sonar
 * ------------------------------------------------------------------
 * attore per l'interfacciamento con il sonar
 */   
QActor sonar context ctxsonar{
	State s0 initial{
		printCurrentMessage
		forward transporttrolley -m alarm:alarm(ARG)		
		// emit guicmd:guicmd(createticket,10)
			
	}
	//Transition t0 whenEvent ticketaccepted -> sendticket
	
	/*State sendticket{
			[# CommUtils.outmagenta("[state] send ticket"); 
				val TicketCode  = payloadArg(0);
			#]
		emit guicmd:guicmd(insertticket,$TicketCode)
	}*/
}
 