/*

 */      
System /* -msglog */ coldstorageservice 

//Dispatch startcmd   : start( ARG ) 					//sender:serviceaccessgui receiver:appl
Request storefood : storefood( KG ) 					//sender:serviceaccessgui receiver:coldstorageservice
Reply ticketaccepted : ticketaccepted( TICKETCODE, TICKETSECRET, TIMESTAMP ) 	//sender:coldstorageservice receiver:serviceaccessgui
Reply ticketdenied  : ticketdenied( ARG ) 		//sender:coldstorageservice receiver:serviceaccessgui

													//sender:coldstorage receiver:coldstorageservice

//Dispatch failticket : failticket(ARG) 
Dispatch sendticket: sendticket(TICKETCODE, TICKETSECRET, TIMESTAMP) 			//sender:serviceaccessgui receiver:coldstorageservice
Dispatch chargetaken : chargetaken(ARG)				//sender:coldstorageservice receiver:serviceaccessgui 
Reply ticketexpired: ticketexpired(ARG) 			//sender:coldstorageservice receiver:serviceaccessgui 

													//emitter:serviceaccessgui listener:coldstorageservice
													//emitter:serviceaccessgui listener:fakeuser

 
//robot pos messages
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(ARG)


//-------------------------------------------------------------
Request howmanykgavailable : howmanykgavailable(ARG) //sender:coldstorageservice receiver:coldroom
Reply kgavailable : kgavailable(KG) //sender:coldroom receiver:coldstorageservice 
Dispatch updatekg : updatekg (KG) //sender:coldstorageservice receiver:coldroom




Request engage : engage(ARG)
 

Context ctxbasicrobot  ip [host= "127.0.0.1"   port= 8020 ]   
Context ctxcoldstorageservice   ip [host= "localhost"   port= 8038 ]
 
ExternalQActor basicrobot context ctxbasicrobot  

//Context ctxgui ip [host="127.0.0.1" port=8112]  
//ExternalQActor serviceaccessgui context ctxgui
 
/*  
 * ------------------------------------------------------------------
 *  coldstorageservice 
 * ------------------------------------------------------------------
*/      
QActor coldstorageservice context ctxcoldstorageservice{  
	
	//*********** INTERAZIONE CON SERVICE ACCESS GUI
	[# var Kgtoload : Long = 0; #]
	State s0 initial {	 
		println("&&&  appl coldstorageservice is now ACTIVE ...") 
		//tutti i messaggi che arrivano quando sono in uno degli stati successivi
		//se non considerati, non vengono scartati, ma vengono memorizzati in coda e presi in carico successivamente
		//quando si andrà in uno stato che potrà processarli
		discardMsg Off  //default: discardMsg On
    	println("currentMsg=${currentMsg}")
    	println("trying to connect to basicrobot")
    	request basicrobot -m engage : engage( coldstorageservice )
   	}  
   	Transition t0 whenRequest storefood -> askhowmanykgoccupied
    
  	State askhowmanykgoccupied{ 
  		onMsg(storefood:storefood(KG)){
  		[# Kgtoload = payloadArg(0).toLong(); #] //payloadArg(0) == KG
  		//chiedi a cold room quanto spazio è disponibile
  		request coldroom -m howmanykgavailable : howmanykgavailable
  		} 
	}
	Transition t0 whenReply kgavailable -> checkifthereisenoughspace
	
	State checkifthereisenoughspace {
		[# var Kgavailable = payloadArg(0).toLong(); 
		   var TICKETCODE = 100;
		   var TICKETSECRET= "000";
		   var TIMESTAMP = "ciao"; 
		#]
		if [# Kgtoload <= Kgavailable#] { 
			replyTo storefood with ticketaccepted : ticketaccepted($TICKETCODE, $TICKETSECRET, $TIMESTAMP)
		}
		else{
			replyTo storefood with ticketdenied : ticketdenied
		}
	}   
  	Transition t0 whenMsg sendticket-> startcoldstoragerobot
  	
  	
  	//*********** INTERAZIONE CON ROBOT
  	State startcoldstoragerobot{
  		//forward serviceaccessgui -m chargetaken : chargetaken(ok)
  		//send start command to coldstoragerobot
  		
  	}
  	
  	
  	
  	State updatecoldstorage {
  		//add kg already arrived to cold storage
  		
  	}
  	
   	Transition t0 whenRequest storefood -> askhowmanykgoccupied
  		
  	}
  

/*   
 * ------------------------------------------------------------------
 *  coldroom
 * ------------------------------------------------------------------
*/     
QActor coldroom context ctxcoldstorageservice{  
	[# var Kgstored : Long = 100 #]   //TODO
	
	State s0 initial {	 
		println("&&&  appl coldroom is now ACTIVE ...") 
		printCurrentMessage
   	}  
	//wait request on info kg
	Transition t0 whenRequest howmanykgavailable -> replywithcoldroomspacestate
				  whenMsg updatekg -> handleupdateKg
	
	
	State replywithcoldroomspacestate{ 
		//send the actual state of the space
		replyTo howmanykgavailable with kgavailable : kgavailable($Kgstored)
	}
	//wait request on info kg
	Transition t0 whenRequest howmanykgavailable -> replywithcoldroomspacestate
				  whenMsg updatekg -> handleupdateKg
	
	//request to update kg
	State handleupdateKg{
		//update storage
		[# 
			var insertkg = payloadArg(0).toLong();
			Kgstored += insertkg;
		#]
	}
}


/*  
 * ------------------------------------------------------------------
 *  transporttrolley
 * ------------------------------------------------------------------
*/      
QActor transporttrolley context ctxcoldstorageservice{     
	
	State s0 initial{
		println("&&&  appl coldstoragerobot is now ACTIVE ...") 
	}
	//when coldstorageservice sends start command --> start moving robot
	
	State moverobottoindoor{
		//send event "robot is in indoor"
		request basicrobot -m moverobot:moverobot(1,6)
	}
	Transition t1 whenReply moverobotdone -> moverobottostorage
 				  whenReply moverobotfailed -> moverobottohome
	//when robot has taken kg from camion -> move robot to coldstorage
	State moverobottostorage{
		//send event "robot is in indoor"
		
		request basicrobot -m moverobot:moverobot(3,5)
	}
	Transition t2 whenReply moverobotdone -> moverobottohome
 				  whenReply moverobotfailed -> moverobottohome
	//when robot has placed kg into storage -> move robot to home
	State moverobottohome{
		//send event "robot is in home"
		
		request basicrobot -m moverobot:moverobot(1,1)
	}
	Transition t3 whenReply moverobotdone -> emitrobotisinhome
 				  whenReply moverobotfailed -> moverobottohome
 	State emitrobotisinhome{
 		
 	}
	//wait next startcoldstoragerobot --> transition to moverobottoindoor
  	
  	
  	
}


/*
--------------------------------------
 serviceaccessgui
--------------------------------------
*/

/*  
 * ------------------------------------------------------------------
 *  fakeuser
 * ------------------------------------------------------------------
 * utente fake per sprint1, in attesa di creare una console remota 
 */   
/*QActor fakeuser context ctxall{
	State s0 initial{
		printCurrentMessage		
		 emit guicmd:guicmd(createticket,10)
			
	}
	Transition t0 whenEvent ticketaccepted -> sendticket
	
	State sendticket{
			[# CommUtils.outmagenta("[state] send ticket"); 
				val TicketCode  = payloadArg(0);
			#]
		emit guicmd:guicmd(insertticket,$TicketCode)
	}
}
/*  
 * ------------------------------------------------------------------
 *  sonar
 * ------------------------------------------------------------------
 * attore per l'interfacciamento con il sonar
 */   

 