/* Generated by AN DISI Unibo */ 
package it.unibo.controllerled

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Controllerled ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("${name} | START")
						forward("ledCmd", "ledCmd(off)" ,"led" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t027",targetState="ledblink",cond=whenEvent("robotismoving"))
					transition(edgeName="t028",targetState="ledoff",cond=whenEvent("robotisinhome"))
					transition(edgeName="t029",targetState="ledon",cond=whenEvent("robotisstopped"))
				}	 
				state("ledblink") { //this:State
					action { //it:State
						CommUtils.outyellow("${name} - Turn the Led blink")
						forward("ledCmd", "ledCmd(blink)" ,"led" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t030",targetState="ledblink",cond=whenEvent("robotismoving"))
					transition(edgeName="t031",targetState="ledoff",cond=whenEvent("robotisinhome"))
					transition(edgeName="t032",targetState="ledon",cond=whenEvent("robotisstopped"))
				}	 
				state("ledon") { //this:State
					action { //it:State
						CommUtils.outyellow("${name} - Turn the Led on")
						forward("ledCmd", "ledCmd(on)" ,"led" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t033",targetState="ledblink",cond=whenEvent("robotismoving"))
					transition(edgeName="t034",targetState="ledon",cond=whenEvent("robotisstopped"))
				}	 
				state("ledoff") { //this:State
					action { //it:State
						CommUtils.outyellow("${name} - Turn the Led off")
						forward("ledCmd", "ledCmd(off)" ,"led" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t035",targetState="ledblink",cond=whenEvent("robotismoving"))
					transition(edgeName="t036",targetState="ledoff",cond=whenEvent("robotisinhome"))
				}	 
			}
		}
}
