/* Generated by AN DISI Unibo */ 
package it.unibo.controllerled

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Controllerled ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("${name} | START")
						forward("ledCmd", "ledCmd(off)" ,"led" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t028",targetState="handlerobotstate",cond=whenEvent("robotstate"))
				}	 
				state("handlerobotstate") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("robotstate(ATHOME,MOVING,STOPPED)"), Term.createTerm("robotstate(ATHOME,MOVING,STOPPED)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Athome = payloadArg(0).toBoolean(); 
											   var Moving = payloadArg(1).toBoolean(); 
											   var Stopped = payloadArg(2).toBoolean(); 
								CommUtils.outcyan("${name} | robotstate: ATHOME=$Athome MOVING=$Moving STOPPED=$Stopped")
								if(  Athome  
								 ){forward("ledCmd", "ledCmd(off)" ,"led" ) 
								}
								else
								 {if(  Stopped  
								  ){forward("ledCmd", "ledCmd(on)" ,"led" ) 
								 }
								 else
								  {if(  Moving  
								   ){forward("ledCmd", "ledCmd(blink)" ,"led" ) 
								  }
								  else
								   {CommUtils.outcyan("${name} | WRONG ROBOT STATE MESSAGE")
								   }
								  }
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t029",targetState="handlerobotstate",cond=whenEvent("robotstate"))
				}	 
			}
		}
}
