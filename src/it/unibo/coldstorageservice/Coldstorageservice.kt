/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstorageservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var Kgtoload : Long = 0;  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("&&&  appl coldstorageservice is now ACTIVE ...")
						discardMessages = false
						CommUtils.outblack("currentMsg=${currentMsg}")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="askhowmanykgoccupied",cond=whenRequest("storefood"))
				}	 
				state("askhowmanykgoccupied") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storefood(KG)"), Term.createTerm("storefood(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Kgtoload = payloadArg(0).toLong();  
								request("howmanykgavailable", "howmanykgavailable" ,"coldroom" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="checkifthereisenoughspace",cond=whenReply("kgavailable"))
				}	 
				state("checkifthereisenoughspace") { //this:State
					action { //it:State
						 var Kgavailable = payloadArg(0).toLong(); 
									   var TICKETCODE = 100;
									   var TICKETSECRET= "000";
									   var TIMESTAMP = "ciao"; 
						if(  Kgtoload <= Kgavailable 
						 ){answer("storefood", "ticketaccepted", "ticketaccepted($TICKETCODE,$TICKETSECRET,$TIMESTAMP)"   )  
						}
						else
						 {answer("storefood", "ticketdenied", "ticketdenied"   )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="startcoldstoragerobot",cond=whenDispatch("sendticket"))
				}	 
				state("startcoldstoragerobot") { //this:State
					action { //it:State
						forward("dodepositaction", "dodepositaction" ,"transporttrolley" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="updatecoldstorage", cond=doswitch() )
				}	 
				state("updatecoldstorage") { //this:State
					action { //it:State
						forward("updatekg", "updatekg($Kgtoload)" ,"coldroom" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="askhowmanykgoccupied",cond=whenRequest("storefood"))
				}	 
			}
		}
}
