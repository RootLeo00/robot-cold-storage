/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstorageservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("&&&  appl coldstorageservice is now ACTIVE ...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="startticket",cond=whenRequest("createticket"))
				}	 
				state("startticket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("createticket(ARG)"), Term.createTerm("createticket(MASS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								  				Mass = payloadArg(0);	
								CommUtils.outblack("startticket  ")
								request("checkspace", "checkspace($Mass)" ,"coldstorage" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="doticket",cond=whenReply("enoughspace"))
					transition(edgeName="t02",targetState="failticket",cond=whenReply("notenoughspace"))
				}	 
				state("failticket") { //this:State
					action { //it:State
						answer("createticket", "denyticket", "denyticket(deny)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("doticket") { //this:State
					action { //it:State
						
									Ticket="paperinik"	
						answer("createticket", "acceptticket", "acceptticket($Ticket)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="startcoldstoragerobot",cond=whenDispatch("camionin"))
				}	 
				state("startcoldstoragerobot") { //this:State
					action { //it:State
						forward("startrobotservice", "startrobotservice(arg)" ,"coldstoragerobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t14",targetState="updatecoldstorage",cond=whenEvent("robotincoldstorage"))
				}	 
				state("updatecoldstorage") { //this:State
					action { //it:State
						forward("updatestorage", "updatestorage($Mass)" ,"coldstorage" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="startticket",cond=whenRequest("createticket"))
				}	 
			}
		}
}
