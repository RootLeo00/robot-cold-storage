/* Generated by AN DISI Unibo */ 
package it.unibo.coldroom

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldroom ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var Kgstored : Long = 0 ;
				var MAXW : Long = 100;
				var Kgavailable=MAXW;  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
						CommUtils.outyellow("$name | active")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="replywithcoldroomspacestate",cond=whenRequest("howmanykgavailable"))
					transition(edgeName="t07",targetState="handleupdateKg",cond=whenDispatch("updatekg"))
				}	 
				state("replywithcoldroomspacestate") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | kg available $Kgavailable")
						answer("howmanykgavailable", "kgavailable", "kgavailable($Kgavailable)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleupdateKg") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updatekg(KG)"), Term.createTerm("updatekg(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
											var insertkg = payloadArg(0).toLong(); 
											Kgstored += insertkg;
											Kgavailable-=insertkg;
								CommUtils.outyellow("$name | updated storage Kgavailable:$Kgavailable Kgstored:$Kgstored")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
