/* Generated by AN DISI Unibo */ 
package it.unibo.coldstoragerobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstoragerobot ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("&&&  appl coldstoragerobot is now ACTIVE ...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="moverobottoindoor",cond=whenDispatch("startrobotservice"))
				}	 
				state("moverobottoindoor") { //this:State
					action { //it:State
						request("moverobot", "moverobot(1,6)" ,"robotpos" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="moverobottostorage",cond=whenReply("moverobotdone"))
					transition(edgeName="t010",targetState="moverobottohome",cond=whenReply("moverobotfailed"))
				}	 
				state("moverobottostorage") { //this:State
					action { //it:State
						emit("robotisindoor", "robotisindoor(ok)" ) 
						request("moverobot", "moverobot(3,5)" ,"robotpos" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="moverobottohome",cond=whenReply("moverobotdone"))
					transition(edgeName="t012",targetState="moverobottohome",cond=whenReply("moverobotfailed"))
				}	 
				state("moverobottohome") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moverobotok(ARG)"), Term.createTerm("moverobotdone(ok)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								emit("robotisinstorage", "robotisinstorage(ok)" ) 
						}
						emit("robotisinhome", "robotisinhome(ok)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t113",targetState="moverobottoindoor",cond=whenDispatch("startrobotservice"))
				}	 
			}
		}
}
