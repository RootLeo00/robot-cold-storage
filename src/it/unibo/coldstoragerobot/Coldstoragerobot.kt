/* Generated by AN DISI Unibo */ 
package it.unibo.coldstoragerobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstoragerobot ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="moverobottoindoor",cond=whenDispatch("startrobotservice"))
				}	 
				state("moverobottoindoor") { //this:State
					action { //it:State
						emit("robotisindoor", "robotisindoor(ARG)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="moverobottostorage", cond=doswitch() )
				}	 
				state("moverobottostorage") { //this:State
					action { //it:State
						emit("robotisinstorage", "robotisinstorage(ARG)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="moverobottohome", cond=doswitch() )
				}	 
				state("moverobottohome") { //this:State
					action { //it:State
						emit("robotisinhome", "robotisinhome(ARG)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t110",targetState="moverobottoindoor",cond=whenDispatch("startrobotservice"))
				}	 
			}
		}
}
