/* Generated by AN DISI Unibo */ 
package it.unibo.serviceaccessgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Serviceaccessgui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitticketrequest", cond=doswitch() )
				}	 
				state("waitticketrequest") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="handleticketrequest",cond=whenEvent("guicmd"))
				}	 
				state("handleticketrequest") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("guicmd(COMMAND,PARAMETER)"), Term.createTerm("guicmd(createticket,MASS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Mass=10  
								request("createticket", "createticket($Mass)" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t117",targetState="ticketaccepted",cond=whenReply("acceptticket"))
					transition(edgeName="t118",targetState="ticketdenied",cond=whenReply("denyticket"))
				}	 
				state("ticketaccepted") { //this:State
					action { //it:State
						 CommUtils.outgreen("ticket")  
						if( checkMsgContent( Term.createTerm("acceptticket(TICKETCODE)"), Term.createTerm("acceptticket(TICKETCODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val TicketCode= payloadArg(0)
												CommUtils.outmagenta("ticket: ${TICKETCODE}"); 
								emit("ticketaccepted", "ticketaccepted($TicketCode)" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t119",targetState="handleticketfromuser",cond=whenEvent("guicmd"))
				}	 
				state("handleticketfromuser") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("guicmd(COMMAND,PARAMETER)"), Term.createTerm("guicmd(insertticket,TICKET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												Ticket  = "faketicket";
								request("sendcamion", "sendcamion($Ticket)" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitticketrequest", cond=doswitch() )
				}	 
				state("ticketdenied") { //this:State
					action { //it:State
						 CommUtils.outred("not enough space")  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitticketrequest", cond=doswitch() )
				}	 
			}
		}
}
