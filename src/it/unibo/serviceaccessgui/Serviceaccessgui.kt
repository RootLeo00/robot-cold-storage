/* Generated by AN DISI Unibo */ 
package it.unibo.serviceaccessgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Serviceaccessgui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
			 		var SPACELEFT:Long=100; 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
						CommUtils.outmagenta("$name | waiting request")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t118",targetState="storefood",cond=whenRequest("dostorefood"))
					transition(edgeName="t119",targetState="insertticket",cond=whenRequest("doinsertticket"))
					transition(edgeName="t120",targetState="sendcoldroomstatus",cond=whenRequest("getcoldroomstatus"))
					transition(edgeName="t121",targetState="notifygui",cond=whenEvent("updatedcoldroom"))
				}	 
				state("notifygui") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("updatedcoldroom(AVAILABLEKG)"), Term.createTerm("updatedcoldroom(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("$name | updating coldroom status")
								
								 					
								 					SPACELEFT=payloadArg(0).toLong(); 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("sendcoldroomstatus") { //this:State
					action { //it:State
						answer("getcoldroomstatus", "coldroomstatus", "coldroomstatus($SPACELEFT)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("storefood") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("dostorefood(KG)"), Term.createTerm("dostorefood(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								 					
								 					var Kg=payloadArg(0); 
								CommUtils.outmagenta("$name | handling dostorefood request")
								request("storefood", "storefood($Kg)" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t222",targetState="handlestorefoodreply",cond=whenReply("ticketaccepted"))
					transition(edgeName="t223",targetState="handlestorefoodreply",cond=whenReply("ticketdenied"))
				}	 
				state("handlestorefoodreply") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ticketaccepted(TICKETCODE,TICKETSECRET,TIMESTAMP)"), Term.createTerm("ticketaccepted(TICKETNUMBER,TICKETSECRET,TIMESTAMP)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								 					var Ticketcode= payloadArg(0);
											var Ticketsecret= payloadArg(1);
											var Timestamp= payloadArg(2); 
								CommUtils.outmagenta("$name | replying to client with ticketaccepted")
								answer("dostorefood", "ticketaccepted", "ticketaccepted($Ticketcode,$Ticketsecret,$Timestamp)"   )  
						}
						if( checkMsgContent( Term.createTerm("ticketdenied(ARG)"), Term.createTerm("ticketdenied(RESPONSE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								 					var Msg= payloadArg(0);
								CommUtils.outmagenta("$name | replying to client with ticketdenied")
								answer("dostorefood", "ticketdenied", "ticketdenied($Msg)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("insertticket") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("doinsertticket(TICKETNUMBER,TIMESTAMP)"), Term.createTerm("doinsertticket(TICKETCODE,TICKETSECRET)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
											var Ticketcode= payloadArg(0);
											var Ticketsecret= payloadArg(1);
								CommUtils.outmagenta("$name | sneding ticket to coldstorageservice")
								request("sendticket", "sendticket($Ticketcode,$Ticketsecret)" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t324",targetState="handleinsertticketreply",cond=whenReply("chargetaken"))
					transition(edgeName="t325",targetState="handleinsertticketreply",cond=whenReply("ticketexpired"))
					transition(edgeName="t326",targetState="handleinsertticketreply",cond=whenReply("ticketrejected"))
				}	 
				state("handleinsertticketreply") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("chargetaken(ARG)"), Term.createTerm("chargetaken(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								 					var Response= payloadArg(0);
								answer("doinsertticket", "chargetaken", "chargetaken($Response)"   )  
								CommUtils.outmagenta("$name | robot has taken the load")
						}
						if( checkMsgContent( Term.createTerm("ticketexpired(ARG)"), Term.createTerm("ticketexpired(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								 					var Response= payloadArg(0);
								answer("doinsertticket", "ticketexpired", "ticketexpired($Response)"   )  
						}
						if( checkMsgContent( Term.createTerm("ticketrejected(ARG)"), Term.createTerm("ticketrejected(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
								 					var Response= payloadArg(0);
								answer("doinsertticket", "ticketrejected", "ticketrejected($Response)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
