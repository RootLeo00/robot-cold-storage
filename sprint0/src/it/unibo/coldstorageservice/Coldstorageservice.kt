/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstorageservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var Mass = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("&&&  appl coldstorageservice is now ACTIVE ...")
						discardMessages = false
						CommUtils.outblack("currentMsg=${currentMsg}")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="startticket",cond=whenRequest("createticket"))
				}	 
				state("startticket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("createticket(KG)"), Term.createTerm("createticket(MASS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Mass = payloadArg(0).toLong()  
								request("getcoldroomspace", "getcoldroomspace(ok)" ,"coldroom" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="answerticketrequest",cond=whenReply("coldroomspace"))
				}	 
				state("answerticketrequest") { //this:State
					action { //it:State
						  
									var Space= payloadArg(0).toLong()
									if( (Space - Mass ) < 0 ) {  
						answer("createticket", "denyticket", "denyticket(ok)"   )  
						 }  
						  else  {
									val TICKETCODE="faketicket" 
						answer("createticket", "acceptticket", "acceptticket($TICKETCODE)"   )  
						 }  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="startcoldstoragerobot",cond=whenDispatch("sendtruck"))
				}	 
				state("startcoldstoragerobot") { //this:State
					action { //it:State
						forward("chargetaken", "chargetaken(ok)" ,"serviceaccessgui" ) 
						forward("startrobotservice", "startrobotservice(ok)" ,"transporttrolley" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("updatecoldstorage") { //this:State
					action { //it:State
						forward("updatestorage", "updatestorage($Mass)" ,"coldroom" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="startticket",cond=whenRequest("createticket"))
				}	 
			}
		}
}
